name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Build'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - "v*.*.*"
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop
          
      - name: Install dependencies
        run: |
          flutter clean
          flutter pub get
        
      - name: Build Windows
        run: flutter build windows --release
        
      - name: Check Build Directory
        run: |
          Get-ChildItem -Path "build\windows\x64\runner\Release" -Recurse
          
      - name: Create Archive Directory
        run: mkdir release-builds
        
      - name: Archive Windows Release
        shell: pwsh
        run: |
          $source = "build\windows\x64\runner\Release\*"
          $destination = "release-builds\windows-release.zip"
          if (Test-Path $source) {
              Compress-Archive -Path $source -DestinationPath $destination -Force
          } else {
              Write-Error "Build directory not found!"
              exit 1
          }

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: release-builds/windows-release.zip
          if-no-files-found: error
        
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: Enable Linux Desktop
        run: flutter config --enable-linux-desktop
          
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev
          sudo apt-get install -y libmpv-dev mpv
          sudo apt-get install -y pkg-config
          
      - name: Install dependencies
        run: |
          flutter clean
          flutter pub get
        
      - name: Build Linux
        run: flutter build linux --release
        
      - name: Make Linux Binary Executable
        run: |
          cd build/linux/x64/release/bundle
          chmod +x shadebox
        
      - name: Create Archive Directory
        run: mkdir -p release-builds
        
      - name: Archive Linux Release
        run: |
          cd build/linux/x64/release/bundle
          # Önce tüm dosyaları zip'le
          zip -r ../../../../../release-builds/linux-release.zip *
          
          # Eğer lib klasörü yoksa oluştur
          mkdir -p lib
          
          # .so dosyalarını lib klasörüne kopyala (varsa)
          find . -name "*.so*" -exec cp --parents {} lib/ \;
          
          # lib klasörünü de zip'e ekle
          if [ -d "lib" ]; then
            zip -ur ../../../../../release-builds/linux-release.zip lib/
          fi

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: release-builds/linux-release.zip
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Downloaded Artifacts
        run: ls -R artifacts/

      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
